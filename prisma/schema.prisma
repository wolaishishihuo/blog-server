// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  username  String     @unique
  password  String
  nickname  String?
  avatar    String?
  createdAt DateTime   @default(now()) @db.DateTime(0)
  updatedAt DateTime   @updatedAt @db.DateTime(0)
  userRole  UserRole[]
  todoList  Todo[]

  @@map("users")
}

model Todo {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  status    Int      @default(0)
  priority  Int      @default(0)
  deadline  DateTime @db.DateTime(0)
  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @updatedAt @db.DateTime(0)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("todos")
}

model Role {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  description    String
  createdAt      DateTime         @default(now()) @db.DateTime(0)
  updatedAt      DateTime         @updatedAt @db.DateTime(0)
  userRole       UserRole[]
  rolePermission RolePermission[]

  @@map("roles")
}

model UserRole {
  userId Int
  roleId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

model Permission {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  description    String
  createdAt      DateTime         @default(now()) @db.DateTime(0)
  updatedAt      DateTime         @updatedAt @db.DateTime(0)
  rolePermission RolePermission[]

  @@map("permissions")
}

model RolePermission {
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}
